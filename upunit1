package jsys.sales.web;

import jakarta.servlet.http.HttpServletRequest;
import jsys.sales.common.*;
import jsys.sales.entity.Customer;
import jsys.sales.logic.*;

public class CustomerUpdateAction implements ActionIF {
    public String execute(HttpServletRequest request) {

        String page = "V204_01CustomerUpdate.jsp";
        String buttonId = request.getParameter("buttonId");

        try {
            if ("mainMenu".equals(buttonId)) {
                // メインメニューに戻る処理（画面遷移のみ）
                page = "V200_01MainMenu.jsp";

            } else if ("search".equals(buttonId)) {
                // 検索処理
                String custCode = request.getParameter("custCode");

                if (custCode == null || custCode.trim().isEmpty()) {
                    throw new SalesBusinessException("得意先コードを入力してください。");
                }

                CustomerFindLogic logic = new CustomerFindLogic();
                Customer customer = logic.findCustomer(custCode.trim());

                if (customer == null) {
                    throw new SalesBusinessException("該当する得意先が見つかりませんでした。");
                }

                // 検索結果をリクエスト属性に格納
                request.setAttribute("custCode", customer.getCustCode());
                request.setAttribute("custName", customer.getCustName());
                request.setAttribute("telNo", customer.getTelNo());
                request.setAttribute("postalCode", customer.getPostalCode());
                request.setAttribute("address", customer.getAddress());
                request.setAttribute("discountRate", customer.getDiscountRate());

            } else if ("update".equals(buttonId)) {
                // 更新処理

                // パラメータ取得
                String custCode     = request.getParameter("custCode");
                String custName     = request.getParameter("custName");
                String telNo        = request.getParameter("telNo");
                String postalCode   = request.getParameter("postalCode");
                String address      = request.getParameter("address");
                String discountRateStr = request.getParameter("discountRate");

                // 入力チェック
                if (custCode == null || custCode.isEmpty()) {
                    throw new SalesBusinessException("得意先コードを入力してください。");
                }
                if (custName == null || custName.isEmpty()) {
                    throw new SalesBusinessException("得意先名を入力してください。");
                }
                if (telNo == null || telNo.isEmpty()) {
                    throw new SalesBusinessException("電話番号を入力してください。");
                }
                if (postalCode == null || postalCode.isEmpty()) {
                    throw new SalesBusinessException("郵便番号を入力してください。");
                }
                if (address == null || address.isEmpty()) {
                    throw new SalesBusinessException("住所を入力してください。");
                }
                if (discountRateStr == null || discountRateStr.isEmpty()) {
                    throw new SalesBusinessException("割引率を入力してください。");
                }

                int discountRate;
                try {
                    discountRate = Integer.parseInt(discountRateStr);
                    if (discountRate < 0) {
                        throw new SalesBusinessException("割引率には0以上の数値を入力してください。");
                    }
                } catch (NumberFormatException e) {
                    throw new SalesBusinessException("割引率には数値を入力してください。");
                }

                // Customer オブジェクト作成
                Customer customer = new Customer();
                customer.setCustCode(custCode);
                customer.setCustName(custName);
                customer.setTelNo(telNo);
                customer.setPostalCode(postalCode);
                customer.setAddress(address);
                customer.setDiscountRate(discountRate);

                // 更新処理
                CustomerUpdateLogic logic = new CustomerUpdateLogic();
                boolean updated = logic.updateCustomerData(custCode, customer);

                if (!updated) {
                    throw new SalesBusinessException("得意先情報の更新に失敗しました。");
                }

                request.setAttribute("successMessage", "得意先情報を更新しました。");
                request.setAttribute("custCode", customer.getCustCode());
                request.setAttribute("custName", customer.getCustName());
                request.setAttribute("telNo", customer.getTelNo());
                request.setAttribute("postalCode", customer.getPostalCode());
                request.setAttribute("address", customer.getAddress());
                request.setAttribute("discountRate", customer.getDiscountRate());

            }

        } catch (SalesBusinessException e) {
            request.setAttribute("errorMessage", e.getMessage());
        } catch (SalesSystemException e) {
            request.setAttribute("errorMessage", e.getMessage());
            page = "V901_01SystemErrorPage.jsp";
        }

        return page;
    }
}
